# =============================================================================
# FITNESS APPLICATION - PRODUCTION ENVIRONMENT (YAML)
# =============================================================================

spring:
  profiles:
    active: prod
  
  # Production Database (PostgreSQL)
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/fitness_app}
    driver-class-name: org.postgresql.Driver
    username: ${DATABASE_USERNAME:postgres}
    password: ${DATABASE_PASSWORD}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      leak-detection-threshold: 60000
  
  # H2 Console disabled in production
  h2:
    console:
      enabled: false
  
  # JPA Configuration for production
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: ${DDL_AUTO:validate}
    show-sql: false
    format-sql: false
    properties:
      hibernate:
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
        cache:
          use_second_level_cache: true
          use_query_cache: true

# Production Server Configuration
server:
  port: ${SERVER_PORT:8080}
  error:
    include-stacktrace: never
    include-message: never
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
  http2:
    enabled: true

# Production Security Headers
server:
  servlet:
    session:
      cookie:
        http-only: true
        secure: true

# Production Logging (less verbose, file-based)
logging:
  level:
    com.fitness_application: ${LOG_LEVEL:INFO}
    org.springframework.security: WARN
    org.hibernate.SQL: WARN
    root: WARN
  file:
    name: logs/fitness-app-prod.log
  logback:
    rollingpolicy:
      max-file-size: 100MB
      max-history: 30
      total-size-cap: 3GB

# Production JWT settings (longer expiration)
jwt:
  expiration: ${JWT_EXPIRATION:86400000} # 24 hours

# Production CORS (restrictive)
cors:
  allowed:
    origins: ${CORS_ALLOWED_ORIGINS}

app:
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since
    allow-credentials: true

# Production Swagger Configuration (might be disabled)
springdoc:
  swagger-ui:
    enabled: ${SWAGGER_ENABLED:false}
  api-docs:
    enabled: ${API_DOCS_ENABLED:false}

# Production Management Configuration (restricted)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when_authorized
    info:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
